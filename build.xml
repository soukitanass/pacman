<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="pacman">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../eclipse/java-oxygen/eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <path id="pacman.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/gson-2.6.2.jar"/>
        <pathelement location="lib/byte-buddy-1.8.21.jar"/>
        <pathelement location="lib/byte-buddy-agent-1.8.21.jar"/>
        <pathelement location="lib/mockito-core-2.22.0.jar"/>
        <pathelement location="lib/objenesis-2.6.jar"/>
        <pathelement location="lib/hamcrest-core-1.3.jar"/>
        <pathelement location="lib/junit-4.12-yb-1.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="resources">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="resources"/>
            <src path="test"/>
            <classpath refid="pacman.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="Game (1)">
        <java classname="game.Game" failonerror="true" fork="yes">
            <classpath refid="pacman.classpath"/>
        </java>
    </target>
    <target name="Game (3)">
        <java classname="ca.usherbrooke.pacman.game.Game" failonerror="true" fork="yes">
            <classpath refid="pacman.classpath"/>
        </java>
    </target>
    <target name="Game">
        <java classname="Game" failonerror="true" fork="yes">
            <classpath refid="pacman.classpath"/>
        </java>
    </target>
    <target name="GameModelTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="model.GameModelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="GameTimerTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="GameTimerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="java">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="LevelsTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.model.LevelsTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="LevelTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.model.LevelTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="LibraryTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="LibraryTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="MainLoopTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.game.MainLoopTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="pacman">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.controller.PeriodicRandomDirectionControllerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.game.MainLoopTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.GameModelTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.GhostMoveValidatorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.LevelTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.LevelsTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.MovementManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanMoveValidatorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanPacgumCollisionManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanSuperPacgumCollisionManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.WrapAroundMoveRequestSolverTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.random.RandomDirectionGeneratorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.sound.SoundFactoryTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.sound.SoundPlayerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.GhostSpriteTogglerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.SpriteFacadeTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.SpriteTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="PacManTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="model.PacManTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="SoundFactoryTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="sound.SoundFactoryTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="SpriteFacadeTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="view.SpriteFacadeTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr" haltonerror="true" haltonfailure="true">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.controller.PeriodicRandomDirectionControllerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.game.MainLoopTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.GameModelTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.GhostMoveValidatorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.LevelTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.LevelsTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.MovementManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanMoveValidatorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanPacgumCollisionManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.PacmanSuperPacgumCollisionManagerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.WrapAroundMoveRequestSolverTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.random.RandomDirectionGeneratorTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.sound.SoundFactoryTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.model.sound.SoundPlayerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.GhostSpriteTogglerTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.SpriteFacadeTest" todir="${junit.output.dir}"/>
            <test name="ca.usherbrooke.pacman.view.SpriteTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="DirectionManagerTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.usherbrooke.pacman.model.DirectionManagerTest" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="pacman.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
